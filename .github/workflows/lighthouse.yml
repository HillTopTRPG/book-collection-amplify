name: Lighthouse Performance Audit

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-20.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20.x-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          # Try npm ci first, fall back to npm install if it fails
          npm ci || (echo "npm ci failed, falling back to npm install" && npm install)

      - name: Create mock amplify_outputs.json for build
        run: |
          cat > amplify_outputs.json << 'EOF'
          {
            "auth": {
              "user_pool_id": "mock-user-pool-id",
              "aws_region": "us-east-1",
              "user_pool_client_id": "mock-client-id",
              "identity_pool_id": "mock-identity-pool-id",
              "mfa_methods": [],
              "standard_required_attributes": ["email"],
              "username_attributes": ["email"],
              "user_verification_types": ["email"],
              "groups": [],
              "mfa_configuration": "NONE",
              "password_policy": {
                "min_length": 8,
                "require_lowercase": true,
                "require_numbers": true,
                "require_symbols": true,
                "require_uppercase": true
              },
              "unauthenticated_identities_enabled": true
            },
            "data": {
              "url": "https://mock-api-url.amazonaws.com/graphql",
              "aws_region": "us-east-1",
              "api_key": "mock-api-key",
              "default_authorization_type": "AMAZON_COGNITO_USER_POOLS",
              "authorization_types": ["API_KEY", "AWS_IAM"],
              "model_introspection": {
                "version": 1,
                "models": {
                  "Collection": {
                    "name": "Collection",
                    "fields": {
                      "id": {"name": "id", "isArray": false, "type": "ID", "isRequired": true, "attributes": []},
                      "isbn": {"name": "isbn", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "meta": {"name": "meta", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "memo": {"name": "memo", "isArray": false, "type": "String", "isRequired": false, "attributes": []}
                    },
                    "syncable": true,
                    "pluralName": "Collections",
                    "attributes": [{"type": "model", "properties": {}}],
                    "primaryKeyInfo": {"isCustomPrimaryKey": false, "primaryKeyFieldName": "id", "sortKeyFieldNames": []}
                  },
                  "FilterSet": {
                    "name": "FilterSet",
                    "fields": {
                      "id": {"name": "id", "isArray": false, "type": "ID", "isRequired": true, "attributes": []},
                      "name": {"name": "name", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "filters": {"name": "filters", "isArray": false, "type": "String", "isRequired": true, "attributes": []}
                    },
                    "syncable": true,
                    "pluralName": "FilterSets",
                    "attributes": [{"type": "model", "properties": {}}],
                    "primaryKeyInfo": {"isCustomPrimaryKey": false, "primaryKeyFieldName": "id", "sortKeyFieldNames": []}
                  }
                },
                "enums": {},
                "nonModels": {}
              }
            },
            "version": "1.4"
          }
          EOF

      - name: Build application
        run: npm run build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Audit performance with Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30