name: Dependabot Auto-merge

on:
  pull_request:
    target: develop
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write
  issues: write

jobs:
  setup-labels-and-branch:
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Create dependabot label if not exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # dependabotラベルが存在するかチェック
          if ! gh label list | grep -q "dependabot"; then
            echo "Creating dependabot label..."
            gh label create "dependabot" --color "0366d6" --description "Pull requests that update dependencies"
          else
            echo "dependabot label already exists."
          fi

      - name: Check and Create Develop Branch
        run: |
          # リモートブランチ情報を取得
          git fetch origin
          # developブランチが存在するかチェック
          if ! git show-ref --verify --quiet refs/remotes/origin/develop; then
            echo "develop branch does not exist. Creating it..."
            # mainから新しいdevelopブランチを作成
            git checkout main
            git checkout -b develop
            git push origin develop
          else
            echo "develop branch already exists."
          fi

  dependabot-tests:
    if: github.actor == 'dependabot[bot]'
    needs: setup-labels-and-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js lts
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          npm ci || (echo "npm ci failed, falling back to npm install" && npm install)

      - name: Create mock amplify_outputs.json
        run: |
          cat > amplify_outputs.json << 'EOF'
          {
            "auth": {
              "user_pool_id": "mock-user-pool-id",
              "aws_region": "us-east-1",
              "user_pool_client_id": "mock-client-id",
              "identity_pool_id": "mock-identity-pool-id",
              "mfa_methods": [],
              "standard_required_attributes": ["email"],
              "username_attributes": ["email"],
              "user_verification_types": ["email"],
              "groups": [],
              "mfa_configuration": "NONE",
              "password_policy": {
                "min_length": 8,
                "require_lowercase": true,
                "require_numbers": true,
                "require_symbols": true,
                "require_uppercase": true
              },
              "unauthenticated_identities_enabled": true
            },
            "data": {
              "url": "https://mock-api-url.amazonaws.com/graphql",
              "aws_region": "us-east-1",
              "api_key": "mock-api-key",
              "default_authorization_type": "AMAZON_COGNITO_USER_POOLS",
              "authorization_types": ["API_KEY", "AWS_IAM"],
              "model_introspection": {
                "version": 1,
                "models": {
                  "Collection": {
                    "name": "Collection",
                    "fields": {
                      "id": {"name": "id", "isArray": false, "type": "ID", "isRequired": true, "attributes": []},
                      "isbn": {"name": "isbn", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "meta": {"name": "meta", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "memo": {"name": "memo", "isArray": false, "type": "String", "isRequired": false, "attributes": []}
                    },
                    "syncable": true,
                    "pluralName": "Collections",
                    "attributes": [{"type": "model", "properties": {}}],
                    "primaryKeyInfo": {"isCustomPrimaryKey": false, "primaryKeyFieldName": "id", "sortKeyFieldNames": []}
                  },
                  "FilterSet": {
                    "name": "FilterSet",
                    "fields": {
                      "id": {"name": "id", "isArray": false, "type": "ID", "isRequired": true, "attributes": []},
                      "name": {"name": "name", "isArray": false, "type": "String", "isRequired": true, "attributes": []},
                      "filters": {"name": "filters", "isArray": false, "type": "String", "isRequired": true, "attributes": []}
                    },
                    "syncable": true,
                    "pluralName": "FilterSets",
                    "attributes": [{"type": "model", "properties": {}}],
                    "primaryKeyInfo": {"isCustomPrimaryKey": false, "primaryKeyFieldName": "id", "sortKeyFieldNames": []}
                  }
                },
                "enums": {},
                "nonModels": {}
              }
            },
            "version": "1.4"
          }
          EOF

      - name: Run lint checks
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm run test:run

  # dependabot-auto-merge:
  #   if: github.actor == 'dependabot[bot]'
  #   needs: dependabot-tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Auto-approve Dependabot PR
  #       uses: hmarr/auto-approve-action@v4
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Enable auto-merge for Dependabot PR
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         # PRのタイトルを取得してコミットメッセージに使用
  #         PR_TITLE="${{ github.event.pull_request.title }}"
  #         gh pr merge --auto --squash --subject "$PR_TITLE" ${{ github.event.pull_request.number }} --repo ${{ github.repository }}
