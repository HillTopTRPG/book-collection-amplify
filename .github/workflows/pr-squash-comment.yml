name: PR Squash on Comment

on:
  issue_comment:
    types: [created]

jobs:
  squash-merge:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/squash')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Check if comment is exactly /squash
        id: check_command
        run: |
          comment="${{ github.event.comment.body }}"
          trimmed_comment=$(echo "$comment" | xargs)
          if [ "$trimmed_comment" = "/squash" ]; then
            echo "valid_command=true" >> $GITHUB_OUTPUT
            echo "✅ Valid /squash command detected"
          else
            echo "valid_command=false" >> $GITHUB_OUTPUT
            echo "❌ Comment does not contain exactly '/squash'"
          fi

      - name: Acknowledge squash command
        if: steps.check_command.outputs.valid_command == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🤖 `/squash` コマンドを検知しました。スカッシュマージを実行します...'
            });

      - name: Check user permissions
        id: check_permissions
        if: steps.check_command.outputs.valid_command == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });

              const hasWriteAccess = ['admin', 'write', 'maintain'].includes(collaborator.permission);

              console.log(`User ${context.actor} has permission: ${collaborator.permission}`);
              console.log(`Has write access: ${hasWriteAccess}`);

              return hasWriteAccess;
            } catch (error) {
              console.error('Error checking permissions:', error);
              return false;
            }

      - name: Get PR details
        id: pr_details
        if: steps.check_command.outputs.valid_command == 'true' && steps.check_permissions.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            console.log(`PR #${pr.number}: ${pr.title}`);
            console.log(`State: ${pr.state}`);
            console.log(`Mergeable: ${pr.mergeable}`);
            console.log(`Base: ${pr.base.ref}, Head: ${pr.head.ref}`);

            return {
              number: pr.number,
              state: pr.state,
              mergeable: pr.mergeable,
              title: pr.title,
              head_sha: pr.head.sha
            };

      - name: Squash and merge PR
        if: steps.check_command.outputs.valid_command == 'true' && steps.check_permissions.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prData = ${{ steps.pr_details.outputs.result }};

            if (prData.state !== 'open') {
              throw new Error(`Cannot merge PR #${prData.number}: PR is ${prData.state}`);
            }

            if (prData.mergeable === false) {
              throw new Error(`Cannot merge PR #${prData.number}: PR is not mergeable (conflicts may exist)`);
            }

            try {
              console.log(`Attempting to squash merge PR #${prData.number}...`);

              const { data: mergeResult } = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prData.number,
                merge_method: 'squash',
                commit_title: `${prData.title} (#${prData.number})`,
                sha: prData.head_sha
              });

              console.log(`✅ Successfully squash merged PR #${prData.number}`);
              console.log(`Merge commit SHA: ${mergeResult.sha}`);

              // Add a reaction to the comment to indicate success
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '+1'
              });

              // Add success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `✅ **スカッシュマージが完了しました！**\n\nPR #${prData.number} を正常にマージしました。\n\n- マージコミット: \`${mergeResult.sha}\`\n- マージ方式: Squash merge`
              });

            } catch (error) {
              console.error('Error during merge:', error);

              // Add a reaction to the comment to indicate failure
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '-1'
              });

              // Add error comment with details
              const errorMessage = error.message || 'Unknown error occurred';
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **スカッシュマージに失敗しました**\n\n**エラー内容:**\n\`\`\`\n${errorMessage}\n\`\`\`\n\n**可能な原因:**\n- PRにマージコンフリクトが存在する\n- PRが既にクローズされている\n- チェックが完了していない\n- その他のマージ制約に違反している\n\n手動でマージを確認してください。`
              });

              throw error;
            }

      - name: Handle invalid command
        if: steps.check_command.outputs.valid_command != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });

      - name: Handle insufficient permissions
        if: steps.check_command.outputs.valid_command == 'true' && steps.check_permissions.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '-1'
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `@${context.actor} You don't have sufficient permissions to merge this PR. Write access is required.`
            });